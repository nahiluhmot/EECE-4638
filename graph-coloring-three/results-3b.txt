Tom Hulihan & Todd Lunter

For this iteration of the graph coloring problem, we used AMPL to solve it.
AMPL takes a problem description as input, and outputs a Linear Programming (LP) problem.
This problem is then given to a LP solver, like cplex.
The goal of the graph coloring problem is to minimize the number of conflicted edges (nodes with the same color),
while coloring all the nodes of a graph.

    minimize objective: sum {i in 0..numNodes-1, j in 0..numNodes-1} conflict[i,j];

Here, `i` and `j` represent the coordinates of each node, and `conflict[i,j]` is a boolean value when summed across all edges is the total number of conflicts.
In order to do this, we ensure there is only one color per node, and set a conflict if there exists two nodes next to eachother with the same color.
The syntax to describe this was fairly similar to the maximization objective:

    subject to constraint1 {i in 0..numNodes-1}: (sum {c in 0..numColors-1} color[i,c]) = 1;

    subject to constraint2 {i in 0..numNodes-1, j in 0..numNodes-1, c in 0..numColors-1: edge[i,j] = 1}:
        conflict[i,j] >= (color[i,c] * color[j,c]);

We found that the results generated by LP for the graph coloring problem were similar to the results of the greedy algorithm.
