Tom Hulihan & Todd Lunter

For the first iteration of the Knapsack problem, we used a brute-force algorithm to try to find a solution.
Generating the subsquences has a O(2^n) time complexity, since that is the total number of subsequences.
However, since the set of all possible sets is lazily generated, it takes constant 0(1) memory.
Then, we had to check each subset in order to find the best.
Checking a subset, S, consisted of first ensuring that S's total cost was less than the cost allowed in the Knapsack.
Finally, we had to find the total value of the S to see if S has a better total value than the current best.
The summing the costs and values each have a time complexity of O(n), so the total time complexity of the algorithm is O(n*(2^n)).
Since only two subsequences (the current subsequence and the best subsequence) are concurrently stored in memory, it has a O(1) memory complexity.
