Tom Hulihan & Todd Lunter

For the second iteration of the knapsack problem, we implemented a greedy algorithm to solve it.
As expected, the results generated by the greedy algorithm were less optimal than those generated by the exhaustive algorithm.
The algorithm first sorts the objects by their value divided by their weight in descending order, which takes O(n * log(n)) time.
Then, the algorithm iterates through the list, trying to put each object in the knapsack, which takes O(n) time.
An object is only put into the knapsack if adding it would not increase the total weight stored in the knapsack to more than the knapsack's limit.
The objects 'current' Knapsack are stored in a separate list from the original list of objects, so this algorithm has a O(n) memory complexity.
Finally, since the two steps of the algorithm take O(n * log(n)) time and O(n) time respectively, the total time complexity is O(n + (n * log(n))) = O(n * log(n)).
